/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  ITimeObject,
} from './interfaces';


export namespace Components {

  interface CountdownTime {
    /**
    * Add more time to current datetime separated by spaces, ex: add="1h 30m"
    */
    'add': string;
    /**
    * Whether start or not when countdown is ready, if not, you must start it manually.
    */
    'autostart': boolean;
    /**
    * Datetime to countdown, must be a valid date
    */
    'datetime': string | number;
    /**
    * Showing format, {d} = days, {h} hours, {m} minutes and {s} seconds.
    */
    'format': string;
    /**
    * Get countdown time as object.
    */
    'getCountDownTime': () => Promise<ITimeObject>;
    /**
    * Re-Draw manually countdown after changing the 'add' or 'datetime' property
    */
    'reDraw': () => Promise<void>;
    /**
    * Restart countdown manually.
    */
    'restart': () => Promise<void>;
    /**
    * Set as expired manually, it'll stop and do everything as expired.
    */
    'setAsExpired': () => Promise<void>;
    /**
    * Start countdown manually.
    */
    'start': () => Promise<number>;
    /**
    * Stop/Pause countdown manually.
    */
    'stop': () => void;
    /**
    * Convert date to UTC
    */
    'utc': boolean;
  }
  interface CountdownTimeAttributes extends StencilHTMLAttributes {
    /**
    * Add more time to current datetime separated by spaces, ex: add="1h 30m"
    */
    'add'?: string;
    /**
    * Whether start or not when countdown is ready, if not, you must start it manually.
    */
    'autostart'?: boolean;
    /**
    * Datetime to countdown, must be a valid date
    */
    'datetime'?: string | number;
    /**
    * Showing format, {d} = days, {h} hours, {m} minutes and {s} seconds.
    */
    'format'?: string;
    /**
    * Emit each time when it changes.
    */
    'onChange'?: (event: CustomEvent) => void;
    /**
    * Emit when countdown expires.
    */
    'onExpire'?: (event: CustomEvent) => void;
    /**
    * Emit when countdown is ready to start.
    */
    'onReady'?: (event: CustomEvent) => void;
    /**
    * Emit when countdown in started.
    */
    'onStarted'?: (event: CustomEvent) => void;
    /**
    * Emit when countdown in stopped.
    */
    'onStopped'?: (event: CustomEvent) => void;
    /**
    * Convert date to UTC
    */
    'utc'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'CountdownTime': Components.CountdownTime;
  }

  interface StencilIntrinsicElements {
    'countdown-time': Components.CountdownTimeAttributes;
  }


  interface HTMLCountdownTimeElement extends Components.CountdownTime, HTMLStencilElement {}
  var HTMLCountdownTimeElement: {
    prototype: HTMLCountdownTimeElement;
    new (): HTMLCountdownTimeElement;
  };

  interface HTMLElementTagNameMap {
    'countdown-time': HTMLCountdownTimeElement
  }

  interface ElementTagNameMap {
    'countdown-time': HTMLCountdownTimeElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
